import{_ as o,c as t,a0 as c,o as a}from"./chunks/framework.Dvj3iZjQ.js";const u=JSON.parse('{"title":"API Reference","description":"","frontmatter":{"0":"A","1":"P","2":"I","3":" ","4":"R","5":"e","6":"f","7":"e","8":"r","9":"e","10":"n","11":"c","12":"e"},"headers":[],"relativePath":"api-reference.md","filePath":"api-reference.md"}'),i={name:"api-reference.md"};function p(n,e,l,s,d,r){return a(),t("div",null,e[0]||(e[0]=[c('<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h1><h3 id="createapp-options" tabindex="-1">createApp(options) <a class="header-anchor" href="#createapp-options" aria-label="Permalink to &quot;createApp(options)&quot;">​</a></h3><p>Creates a new application instance.</p><p><strong>Options</strong></p><ul><li><code>data</code>: An object containing the initial state of the application.</li><li><code>computed</code>: An object of computed properties.</li><li><code>methods</code>: An object of methods.</li><li><code>watch</code>: An object of watchers.</li><li><code>mounted</code>: A function called after the application is mounted.</li><li><code>beforeMount</code>: A function called before the application is mounted.</li><li><code>beforeUpdate</code>: A function called before the application updates.</li><li><code>template</code>: A string or HTMLElement representing the application template.</li><li><code>plugins</code>: An array of plugin functions.</li><li><code>components</code>: An object of component functions.</li><li><code>mixins</code>: An array of mixin objects.</li><li><code>directives</code>: An object of custom directives.</li></ul><div class="info custom-block"><p class="custom-block-title">app.mount</p><p>app.mount(selector) Mounts the application to the DOM element specified by the selector.</p></div><div class="info custom-block"><p class="custom-block-title">app.onUpdated</p><p>app.onUpdated(callback) Registers a callback to be called after each update.</p></div><div class="info custom-block"><p class="custom-block-title">app.createPlugin</p><p>app.createPlugin(name, handler) Creates a custom plugin.</p></div><div class="info custom-block"><p class="custom-block-title">app.emit</p><p>app.emit(eventName, payload) Emits a custom event.</p></div><div class="info custom-block"><p class="custom-block-title">app.on</p><p>app.on(eventName, callback) Listens for a custom event.</p></div><div class="info custom-block"><p class="custom-block-title">app.addLifecycleHook</p><p>app.addLifecycleHook(hookName, callback) Adds a lifecycle hook.</p></div><div class="info custom-block"><p class="custom-block-title">app.applyMixin</p><p>app.applyMixin(mixin) Applies a mixin to the application.</p></div><div class="info custom-block"><p class="custom-block-title">app.component</p><p>app.component(name, componentFunction) Registers a new component.</p></div><div class="info custom-block"><p class="custom-block-title">app.render</p><p>app.render(templateString) Renders a template string and returns a DocumentFragment.</p></div>',14)]))}const f=o(i,[["render",p]]);export{u as __pageData,f as default};
